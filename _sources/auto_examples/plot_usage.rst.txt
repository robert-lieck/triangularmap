
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_usage.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_usage.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_usage.py:


Usage Examples
===========================

This shows some common use cases of the :class:`~triangularmap.tmap.TMap` class.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

Typical Use Cases
-----------------
We use a Numpy array as underlying storage because it allows for slicing and advanced indexing, which is used to
provide some of the functionality.

.. GENERATED FROM PYTHON SOURCE LINES 15-23

.. code-block:: Python


    import numpy as np
    from triangularmap import TMap

    n = 4
    arr = np.array([" "] * TMap.size_from_n(n))
    tmap = TMap(arr)








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Of course, we can set single elements:

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: Python


    tmap[1, 4] = 'o'
    print(tmap.pretty(haxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲       
          ╱  ╲      
         ╱╲  ╱╲     
        ╱  ╲╱ o╲    
       ╱╲  ╱╲  ╱╲   
      ╱  ╲╱  ╲╱  ╲  
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱  ╲╱  ╲╱  ╲╱  ╲
    │   │   │   │   │
    0   1   2   3   4   




.. GENERATED FROM PYTHON SOURCE LINES 30-35

Slicing
-------
Horizontal Slices
.................
We can also set entire rows, specified by depth

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: Python


    tmap.dslice[2] = 'o'
    print(tmap.pretty(daxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲        depth
          ╱  ╲       0
         ╱╲  ╱╲     
        ╱  ╲╱ o╲     1
       ╱╲  ╱╲  ╱╲   
      ╱ o╲╱ o╲╱ o╲   2
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱  ╲╱  ╲╱  ╲╱  ╲ 3




.. GENERATED FROM PYTHON SOURCE LINES 40-41

or level

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: Python


    tmap.lslice[3] = 'x'
    print(tmap.pretty(laxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲        level
          ╱  ╲       4
         ╱╲  ╱╲     
        ╱ x╲╱ x╲     3
       ╱╲  ╱╲  ╱╲   
      ╱ o╲╱ o╲╱ o╲   2
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱  ╲╱  ╲╱  ╲╱  ╲ 1




.. GENERATED FROM PYTHON SOURCE LINES 46-49

This syntax is required because the :meth:`~triangularmap.tmap.TMap.dslice` and
:meth:`~triangularmap.tmap.TMap.lslice` methods return a (sliced) `view` of the underlying numpy array, which allows
for directly assigning values. We can also slice the returned array again

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python


    tmap.lslice[1][1:3] = 'x'
    print(tmap.pretty(laxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲        level
          ╱  ╲       4
         ╱╲  ╱╲     
        ╱ x╲╱ x╲     3
       ╱╲  ╱╲  ╱╲   
      ╱ o╲╱ o╲╱ o╲   2
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱  ╲╱ x╲╱ x╲╱  ╲ 1




.. GENERATED FROM PYTHON SOURCE LINES 54-55

Let's reset the underlying array

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: Python


    tmap.arr[:] = " "
    print(tmap.pretty())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲       
          ╱  ╲      
         ╱╲  ╱╲     
        ╱  ╲╱  ╲    
       ╱╲  ╱╲  ╱╲   
      ╱  ╲╱  ╲╱  ╲  
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱  ╲╱  ╲╱  ╲╱  ╲




.. GENERATED FROM PYTHON SOURCE LINES 60-63

Vertical Slices
.................
We can also use vertical slices defined by a start index

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: Python


    tmap.sslice[1] = 'o'
    print(tmap.pretty(haxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲       
          ╱  ╲      
         ╱╲  ╱╲     
        ╱  ╲╱ o╲    
       ╱╲  ╱╲  ╱╲   
      ╱  ╲╱ o╲╱  ╲  
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱  ╲╱ o╲╱  ╲╱  ╲
    │   │   │   │   │
    0   1   2   3   4   




.. GENERATED FROM PYTHON SOURCE LINES 68-69

or an end index

.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: Python


    tmap.eslice[3] = 'x'
    print(tmap.pretty(haxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲       
          ╱  ╲      
         ╱╲  ╱╲     
        ╱ x╲╱ o╲    
       ╱╲  ╱╲  ╱╲   
      ╱  ╲╱ x╲╱  ╲  
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱  ╲╱ o╲╱ x╲╱  ╲
    │   │   │   │   │
    0   1   2   3   4   




.. GENERATED FROM PYTHON SOURCE LINES 74-80

In contrast to the :meth:`~triangularmap.tmap.TMap.dslice` and :meth:`~triangularmap.tmap.TMap.lslice` method, we
cannot directly slice the underlying array, because it is not aligned with slicing direction. Instead, behind the
scenes, advanced indexing is used to get and set the elements. For simple getting or setting, this does not make
a big difference. But it can lead to subtle bugs when first getting a slice and then trying to set elements, because
the :attr:`~triangularmap.tmap.TMap.sslice` and :attr:`~triangularmap.tmap.TMap.eslice` attributes effectively
correspond to `copies` not `views` of the underlying array. To demonstrate this, let's first fill the map with numbers

.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: Python


    tmap.arr[:] = list(range(len(tmap.arr)))  # implicitly converted to strings by Numpy
    print(tmap.pretty(haxis=True, laxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

           ╱╲        level
          ╱ 0╲       4
         ╱╲  ╱╲     
        ╱ 1╲╱ 2╲     3
       ╱╲  ╱╲  ╱╲   
      ╱ 3╲╱ 4╲╱ 5╲   2
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱ 6╲╱ 7╲╱ 8╲╱ 9╲ 1
    │   │   │   │   │
    0   1   2   3   4   




.. GENERATED FROM PYTHON SOURCE LINES 85-86

When we now do the following

.. GENERATED FROM PYTHON SOURCE LINES 86-91

.. code-block:: Python

    lslice = tmap.lslice[2]
    sslice = tmap.sslice[1]
    print(lslice)
    print(sslice)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['3' '4' '5']
    ['7' '4' '2']




.. GENERATED FROM PYTHON SOURCE LINES 92-93

we get the corresponding slices, as expected. However, when we try to set elements via these objects

.. GENERATED FROM PYTHON SOURCE LINES 93-100

.. code-block:: Python


    lslice[:] = "X"
    sslice[:] = "O"
    print(lslice)
    print(sslice)
    print(tmap.pretty(haxis=True, laxis=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['X' 'X' 'X']
    ['O' 'O' 'O']
           ╱╲        level
          ╱ 0╲       4
         ╱╲  ╱╲     
        ╱ 1╲╱ 2╲     3
       ╱╲  ╱╲  ╱╲   
      ╱ X╲╱ X╲╱ X╲   2
     ╱╲  ╱╲  ╱╲  ╱╲ 
    ╱ 6╲╱ 7╲╱ 8╲╱ 9╲ 1
    │   │   │   │   │
    0   1   2   3   4   




.. GENERATED FROM PYTHON SOURCE LINES 101-102

we see that the original map is only affected for the `lslice` object, because it is a view, while the `sslice` object
is a copy of the underlying storage (likewise for `dslice` and `eslice`).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.005 seconds)


.. _sphx_glr_download_auto_examples_plot_usage.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_usage.ipynb <plot_usage.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_usage.py <plot_usage.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_usage.zip <plot_usage.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
